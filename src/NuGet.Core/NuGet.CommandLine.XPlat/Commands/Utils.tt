<#+
    string InitCaps(string input)
    {
        if (input == null) 
        {
            return null;
        }

        var textInfo = CultureInfo.InvariantCulture.TextInfo;
        var output = textInfo.ToTitleCase(input);
        
        return output;
    }

    bool IsArgument(string type)
    {
        return type == "Argument";
    }

    bool IsOption(string type)
    {
        return type == "Option";
    }

    bool IsArgumentOrOption(string type)
    {
        return IsArgument(type) || IsOption(type);
    }

    string GetProperty(XElement element)
    {
        switch (element.Name.LocalName)
        {
            case "SingleValueOption":
                return "Option";
            case "SwitchOption":
                return "Option";
            case "Value":
                return "Option";
            case "Argument":
                return "Argument";
            case "Example":
                return "Example";
            case "SeeAlso":
                return "SeeAlso";
            default:
                return "Unknown Element Type " + element.Name.LocalName;
        }
    }

    string GetOptionType(XElement element)
    {
        switch (element.Name.LocalName)
        {
            case "SingleValueOption":
                return "SingleValue";
            case "SwitchOption":
                return "NoValue";
            case "Value":
                return "Value";
            default:
                return "Unknown Element Type " + element.Name.LocalName;
        }
    }

    string GetClrType(XElement option)
    {
        string opt = GetOptionType(option);
        string optionType = option.Attribute(XName.Get("Type", ""))?.Value;

        if (optionType != null)
        {
            return optionType;
        }

        switch (GetOptionType(option))
        {
            case "SingleValue":
                return "string";
            case "NoValue":
                return "bool";
            case "Value":
                return optionType;
            default:
                return "object";
        }

        return "";
    }

public static class StringUtilities
{
    public static string InitCaps(string input)
    {
        if (input == null)
        {
            return null;
        }

        var textInfo = CultureInfo.InvariantCulture.TextInfo;
        var output = textInfo.ToTitleCase(input);

        return output;
    }
}

public class OptionData
{
    public OptionData(XElement element)
    {
        string elementName = element.Name.LocalName;
        Name = element.Attribute(XName.Get("Name", ""))?.Value;
        LongName = element.Attribute(XName.Get("LongName", ""))?.Value;
        Help = element.Attribute(XName.Get("Help", ""))?.Value;
        if (Help != null) { Help = "Strings." + Help; }
        Shortcut = element.Attribute(XName.Get("Shortcut",""))?.Value;
        IsRequired = element.Attribute(XName.Get("Required", ""))?.Value == "true";
        DataType = element.Attribute(XName.Get("DataType", ""))?.Value;

        switch (elementName)
        {
            case "SingleValueOption":
                BaseClass = "Option";
                OptionType = "ArgumentArity.ZeroOrOne";
                break;
            case "SwitchOption":
                BaseClass = "Option";
                OptionType = "ArgumentArity.Zero";
                break;
            case "Value":
                BaseClass = "Option";
                OptionType = "ArgumentArity.ExactlyOne";
                break;
            case "Argument":
                BaseClass = "Argument";
                break;
            case "Example":
                BaseClass = "Example";
                break;
            case "SeeAlso":
                BaseClass = "SeeAlso";
                break;
            default:
                throw new Exception("Unknown Element Type " + element.Name.LocalName);
        }
    }

    public string BaseClass { get; set; }
    public string OptionType { get; set; }
    public string Name { get; set; }
    public string InitCapsName { get { return StringUtilities.InitCaps(Name).Replace("-", ""); } }
    public string LongName { get; set; }
    public string LongNameOrName { get { return LongName != null ? LongName : Name; }}
    public string FormalName { get { return Name.Replace("-",""); } }
    public string Shortcut { get; set; }
    public string Help { get; set; }
    public bool IsRequired { get; set; }
    public string ShortcutString { get { return (HasShortcut? ShortcutName + "|" + FullName : FullName); } }
    public bool HasShortcut { get { return Shortcut != null; } }
    public string ShortcutName { get { return "-" + Shortcut; } }
    public string FullName { get { return "--" + Name.ToLower(); } }
    public string DataType { get; set; }
}
#>