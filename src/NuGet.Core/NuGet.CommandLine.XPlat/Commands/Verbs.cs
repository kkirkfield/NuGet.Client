// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// Do not manually edit this autogenerated file:
// instead modify the neighboring .tt file (text template) and/or NuGet.CommandLine.Xplat\Commands\Commands.xml (data file),
// then re-execute the text template via "run custom tool" on VS context menu for .tt file, or via dotnet-t4 global tool.

using System;
using System.CommandLine;
using NuGet.Commands;
using NuGet.Common;

namespace NuGet.CommandLine.XPlat
{
    internal partial class AddVerbParser
    {
        internal static void Register(Command app, Func<ILogger> getLogger)
        {
            var AddCmd = new Command("add");

            // Options directly under the verb

            // nouns added as sub-commands, e.g. add "client-cert"
            var SourceCmd = new Command(name: "source", description: Strings.AddSourceCommandDescription);
            var SourceArg = new Argument<string>(name: "PackageSourcePath", description: Strings.SourcesCommandSourceDescription);
            SourceCmd.AddArgument(SourceArg);
            var nameOption = new Option<string>(aliases: new[] { "-n", "--name" }, description: Strings.SourcesCommandNameDescription)
            {
                Arity = ArgumentArity.ZeroOrOne,
            };
            SourceCmd.AddOption(nameOption);
            var usernameOption = new Option<string>(aliases: new[] { "-u", "--username" }, description: Strings.SourcesCommandUsernameDescription)
            {
                Arity = ArgumentArity.ZeroOrOne,
            };
            SourceCmd.AddOption(usernameOption);
            var passwordOption = new Option<string>(aliases: new[] { "-p", "--password" }, description: Strings.SourcesCommandPasswordDescription)
            {
                Arity = ArgumentArity.ZeroOrOne,
            };
            SourceCmd.AddOption(passwordOption);
            var storePasswordInClearTextOption = new Option<bool>(name: "--store-password-in-clear-text", description: Strings.SourcesCommandStorePasswordInClearTextDescription);
            {
                Arity = ArgumentArity.Zero,
            };
            SourceCmd.AddOption(storePasswordInClearTextOption);
            var validAuthenticationTypesOption = new Option<string>(name: "--valid-authentication-types", description: Strings.SourcesCommandValidAuthenticationTypesDescription);
            {
                Arity = ArgumentArity.ZeroOrOne,
            };
            SourceCmd.AddOption(validAuthenticationTypesOption);
            var configfileOption = new Option<FileInfo>(name: "--configfile", description: Strings.Option_ConfigFile);
            {
                Arity = ArgumentArity.ZeroOrOne,
            };
            SourceCmd.AddOption(configfileOption);
            ///////////////////// HANDLER /////////////////////


            Source.AddHandler();

            ///////////////////// HANDLER /////////////////////
                    SourceCmd.OnExecute(() =>
                    {
                        var args = new AddSourceArgs()
                        {
                            Source = Source.Value,
                        };

                        AddSourceRunner.Run(args, getLogger);
                        return 0;
                    });
                });
            var ClientCertCmd = new Command(name: "client-cert", description: Strings.AddClientCertCommandDescription);
            var packagesourceOption = new Option<